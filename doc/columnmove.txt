*columnmove.txt*	Last change:09-Mar-2014.

Bring cursor vertically in similar ways as line-wise commands.

Author  : machakann <mckn@outlook.com>
License : NYSL license
          Japanese <http://www.kmonos.net/nysl/>
          English (Unofficial) <http://www.kmonos.net/nysl/index.en.html>

==============================================================================
CONTENTS					*columnmove-contents*

INTRODUCTION		|columnmove-introduction|
KEYMAPPINGS		|columnmove-keymappings|
CONFIGURATION		|columnmove-configuration|
FUNCTIONS		|columnmove-functions|

==============================================================================
INTRODUCTION					*columnmove-introduction*

columnmove serves you several keymappings specialized for moving cursor in
vertical direction.

columnmove-f and its variants~
columnmove-f and its variants are the commands for bringing cursor to the
position assigned by a character in the same column. This group has six
keymappings, that is, |columnmove-f|, |columnmove-t|, |columnmove-F|,
|columnmove-T|, |columnmove-;|, |columnmove-,|.  Each of them are the
imitations of |f|, |t|, |F|, |T|, |;|, |,| command, but work in vertical
direction, not in line-wise.

Please remember that these commands would search for the candidates of
destination in the range of the lines displayed. Because I think that it is
not easy to memorize the characters in the same column out of one's sight
precisely. If you want to expand the range of searching, give the number of
lines to |g:columnmove_expand_range|. For example, if you want to add ten
lines to the range, please write following line to your vimrc.
>
	let g:columnmove_expand_range = 10
<

These commands highlight candidates of destination using |hl-IncSearch| until
you type the target character. If you do not like to highlight, set
|g:columnmove_highlight| to 0 as following. If you want to know in detail,
please refer the description of |g:columnmove_highlight|.
>
	let g:columnmove_highlight = 0
<

Because of author's preference, these commands ignore |fold|ed lines in
default. Folded lines would be considered that there is a empty line. If you
want to search the destination with opening folds, please set
|g:columnmove_open_fold| to positive or negative value, I mean not zero
number. Those numbers has different roles, please refer the description of
|g:columnmove_open_fold|. If you just want to open all folds, please assign
|g:columnmove_open_fold| to &foldnestmax as following.
>
	let g:columnmove_open_fold = &foldnestmax
<
Or you can simply set 20, because of the intrinsic restriction of Vim. Please
refer 'foldnestmax'.
>
	let g:columnmove_open_fold = 20
<


------------------------------------------------------------------------------
columnmove-w and its variants~
columnmove-w and its variants are the commands for moving cursor in word-wise.
This group has four keymappings, that is, |columnmove-w|, |columnmove-b|,
|columnmove-e|, |columnmove-ge|. Each of them are the imitations of |w|, |b|,
|e|, |ge|, but work in vertical direction. These commands regard the column
which cursor is on as a line and search for the head or tail of word to move.
These commands regard a empty part of the column (like empty lines) as a space
to skip it. For example, assume a vimscript code like this:
>
	let foo = 1
	let bar = 2

	" addition
	let addition = foo + bar

	echo foo
	echo bar
	echo addition
<
Cut out the first column.
>
	l
	l

	"
	l

	e
	e
	e
<
Consider it as a line.
>
	ll "l eee
<
Empty columns are converted to spaces. Words are defined by using the option
'iskeyword'. Usually '"' is not keyword in vimscript code. Thus if the cursor
is placed on the first 'l', w command brings cursor like, '"' -> 'l' -> 'e'.
Hence |columnmove-w| command bring cursor to the first column of fourth,
fifth, and, seventh lines from the first column of first line.

However, actually, almost all the programming languages are semantic in
line-wise. It means hardly to align characters vertically in semantic way, and
these "strict" commands might not be useful always. If you find that, why
don't you try "spoiled" commands with following configuration?
>
	let g:columnmove_strict_wbege = 0
<
With this configuration, |columnmove-w| and its variants do not think whether
characters are included in 'iskeyword' or not. Just judge whether there is a
empty or a character. Here, write again the first column of the example code.
>
	l
	l

	"
	l

	e
	e
	e
<
"spoiled" commands would stop cursor on the fourth and seventh line since
""l" and "eee" are strings which are separated by empty line. It means that if
there is a space, still stops cursor there.

these commands also ignore folded lines. it means that commands think that
there is nothing for folded parts. if |g:columnmove_fold_treatment| is set as
1, commands regard folded lines as a empty line.
>
	let g:columnmove_fold_treatment = 1
<
it sounds like same, but actually slightly different in some cases. assume
the code like this:
>
	first line
	second line
	---folded lines---
	third line
	fourth line
	
	fifth line
	sixth line
<
if cursor is on the first line and columnmove-w is used, cursor will move to
fifth line. Because these commands ignore folded lines.
>
	first line
	second line
	third line
	fourth line
	
	fifth line
	sixth line
<
however |g:columnmove_fold_treatment| is set as 1, cursor will move to third
line. Because these commands regard folded lines as a empty line.
>
	first line
	second line
	
	third line
	fourth line
	
	fifth line
	sixth line
<


==============================================================================
KEYMAPPINGS					*columnmove-keymappings*

This plugin serves following keymappings.

functions		keymappings			default keymappings
--------------------------------------------------------------------------
|columnmove-f|		<Plug>(columnmove-f)		<M-f>
|columnmove-t|		<Plug>(columnmove-t)		<M-t>
|columnmove-F|		<Plug>(columnmove-F)		<M-F>
|columnmove-T|		<Plug>(columnmove-T)		<M-T>
|columnmove-;|		<Plug>(columnmove-;)		<M-;>
|columnmove-,|		<Plug>(columnmove-,)		<M-,>

|columnmove-w|		<Plug>(columnmove-w)		<M-w>
|columnmove-b|		<Plug>(columnmove-b)		<M-b>
|columnmove-e|		<Plug>(columnmove-e)		<M-e>
|columnmove-ge|		<Plug>(columnmove-ge)		<M-g>e
							 and
							<M-g><M-e>
--------------------------------------------------------------------------

				     *g:columnmove_no_default_key_mappings*
If you do not need default keymappings, define a variable named
|g:columnmove_no_default_key_mappings| in your vimrc.
>
	let g:columnmove_no_default_key_mappings = 1
<
Then default mappings are never applied. And map them again as you like.

These keymappings can accept {count} assignment. If {count} is assigned,
cursor will go to the {count}th destination.

These keymappings are available with |nmap|, |xmap|, |omap|, |imap|.


------------------------------------------------------------------------------
keymappings~
<Plug>(columnmove-f)					*columnmove-f*
	This keymapping serves the function imitating the |f| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-f> <Plug>(columnmove-f)
<

<Plug>(columnmove-t)					*columnmove-t*
	This keymapping serves the function imitating the |t| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-t> <Plug>(columnmove-t)
<

<Plug>(columnmove-F)					*columnmove-F*
	This keymapping serves the function imitating the |F| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-F> <Plug>(columnmove-F)
<

<Plug>(columnmove-T)					*columnmove-T*
	This keymapping serves the function imitating the |T| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-T> <Plug>(columnmove-T)
<

<Plug>(columnmove-;)					*columnmove-;*
	This keymapping serves the function imitating the |;| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-;> <Plug>(columnmove-;)
<

<Plug>(columnmove-,)					*columnmove-,*
	This keymapping serves the function imitating the |,| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-,> <Plug>(columnmove-,)
<

<Plug>(columnmove-w)					*columnmove-w*
	This keymapping serves the function imitating the |w| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-w> <Plug>(columnmove-w)
<

<Plug>(columnmove-b)					*columnmove-b*
	This keymapping serves the function imitating the |b| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-b> <Plug>(columnmove-b)
<

<Plug>(columnmove-e)					*columnmove-e*
	This keymapping serves the function imitating the |e| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-e> <Plug>(columnmove-e)
<

<Plug>(columnmove-ge)					*columnmove-ge*
	This keymapping serves the function imitating the |ge| command in
	vertical direction. You may use as follows. (It is the default
	setting, do not need to write in your vimrc if the default mapping is
	acceptable for you. Just for an example.)
>
	nmap <M-g>e <Plug>(columnmove-ge)
<


==============================================================================
CONFIGURATION					*columnmove-configuration*

There are several variables to control the behavior of keymappings. You can
use same variable name with different scopes, buffer local b:, window local
w:, tab page local t:, global g:. If same variable name is defined in
different scopes, b: is prior to w:, w: is prior to t:, t: is prior to g:.

Related to all the mappings~

g:columnmove_open_fold			*g:columnmove_open_fold*
	The number of levels to open the fold when cursor is moved. If a
	positive value is assigned, opens folds which fold level is equal to
	or below the value. If a negative value is assigned, the opening level
	is determined relative to the level of the current cursor position.
	For instance, when g:columnmove_open_fold is -2 and cursor is on the
	line which fold level is 1, then commands would open folds up to the
	level 3 (= 1-(-2)). If 0 is assigned, do not open any fold and just
	skip them. Default value is 0.

	Or this option can accept a dictionary instead of a number like this:
>
	let g:columnmove_fold_open = {'x' : &foldnestmax, 'i' : -1}
<
	This description allows to assign different rules to different
	|vim-modes|. Following characters can be used to assign each modes as
	a key name of the dictionary.

	'n' : normal mode
	'x' : visual mode
	'o' : operator-pending mode
	'i' : insert mode

Related to columnmove-f command and its variants~
g:columnmove_ignore_case			*g:columnmove_ignore_case*
	If the value is 1, ignore case in search the target character. If the
	value is 0, do not ignore case. Default value is &ignorecase, same as
	the setting of the option 'ignorecase'.

g:columnmove_highlight			*g:columnmove_highlight*
	If the value is not 0, candidates highlighting is valid in
	|columnmove-f| and its variants. If the value is 0, the highlighting
	is tunred off. Default value is 1.

g:columnmove_expand_range			*g:columnmove_expand_range*
	The line number to add to the searching range of destination
	candidates. For example, If ten is assigned, candidates would be
	listed up from the range between the current line to the bottom (or
	top) line of the window plus ten lines out of displayed range. If the
	value is 0, candidates are listed up from the range displayed. If a
	negative value is assigned, the range until the file head/end is
	included to the searching range. Default value is 0.

g:columnmove_update_history		*g:columnmove_update_history*
	If the value is 0, do not update the history for |columnmove-;| and
	|columnmove-,|.  Default value is 1.

g:columnmove_auto_scroll			*g:columnmove_auto_scroll*
	If the value is 1, automatically scroll to upper or lower side as far
	as possible to extend the searching (displayed) range. Default value
	is 0.
	This option takes into account 'scrolloff' option.

Related to columnmove-w command and its variants~
g:columnmove_strict_wbege			*g:columnmove_strict_wbege*
	If the value is not 0, apply the strict rule to move cursor. If the
	value is 0, the spoiled rule is used. Default value is 1.

g:columnmove_fold_treatment			*g:columnmove_fold_treatment*
	If the value is 0, commands ignore folded lines. If the value is 1,
	commands regard folded lines as a empty line. Default value is 0.


==============================================================================
FUNCTIONS					*columnmove-functions*

columnmove-f and its variants~
columnmove-f and its variants keymappings have correspondent functions. They
have similar interface as following:

columnmove#xxx(mode[, target[, count[, options_dictionary]]])

The part filled by "xxx" is a character of its original command.

The first argument "mode" is always required, it is a character to represent a
kind of mapping modes. Since each commands can be mapped for |nmap|, |xmap|,
|omap|, and, |imap|, thus you can assgin 'n', 'x', 'o', and, 'i' to notice it
which mode you want to map.

The second argument "target" is a character. If you have already determined
the target character, you can assign here. If empty string '' is assigned,
then functions would be ask when they are called as usual.

The third argument "count" is a number. If a positive number is assigned,
functions would always ignore {count} and use the assigned number. If zero or
a negative number are assigned, functions refer {count} as usual.

The fourth argument "options_dict" is a dictionary which can force to use
given values of configuration variables. For example, assume you want to use
ignore case always independent with 'ignorecase' option, then use this
argument like this:
>
	nmap <silent> <M-f> :<C-u>call columnmove#f('n', '', 0,
		\					{'ignore_case' : 1})
<
If you want to use with |imap|, use like this:
>
	imap <silent> <M-w> <C-r>=columnmove#f('n', '', 0,
		\					{'ignore_case' : 1})
<
If you want to use with |cmap|, you should not use <silent>. Otherwise
command-line would be not updated appropriately and you will see that it seems
like not moving cursor.
>
	cmap <M-w> <C-r>=columnmove#f('n', '', 0, {'ignore_case' : 1})
<
The key names are the name of configuration variables removing first
"g:columnmove_". That is "open_fold", "ignorecase", "highlight",
"expand_range", "update_history" can be used.
Please refer |columnmove-configuration|.

Besides, a special key "raw" can be also used. If the value is 1, these
function do not move cursor and return a dictionary variable which has keys
named "displacement", "distination", "opened_fold". The key displacement has a
number which represents a distance from the current line to the destination
line, this number is correct only when folds has been opened in order written
in "opened_fold". "opened_fold" has a list which contains lists holding
beginning and ending line number of folds. When these commands work, those
folds would be opened, and closed if necessary.  "distination" is a list
including the line number and column number of distination.

>
	let output = columnmove#f('n', 'a', 1, {'raw' : 1})

	" distance from current position to the destination
	" e.g. 10
	echo output.displacement

	" line number and column number of the destination
	" e.g. [11, 1]
	echo output.distination

	" opened folds
	" e.g. [[3, 5], [6, 9]]
	echo output.open_fold
<


						*columnmove#f()*
columnmove#f(mode[, target[, count[, options_dictionary]]])
	The function corresponds to |columnmove-f|.

						*columnmove#t()*
columnmove#t(mode[, target[, count[, options_dictionary]]])
	The function corresponds to |columnmove-t|.

						*columnmove#F()*
columnmove#F(mode[, target[, count[, options_dictionary]]])
	The function corresponds to |columnmove-F|.

						*columnmove#T()*
columnmove#T(mode[, target[, count[, options_dictionary]]])
	The function corresponds to |columnmove-T|.


As for the following two commands, the second argument "target" is omitted.

						*columnmove#semicolon()*
columnmove#semicolon(mode[, count[, options_dictionary]])
	The function corresponds to |columnmove-;|.

						*columnmove#comma()*
columnmove#comma(mode[, count[, options_dictionary]])
	The function corresponds to |columnmove-,|.


------------------------------------------------------------------------------
columnmove-w and its variants~
columnmove-w and its variants keymappings have correspondent functions. They
have similar interface as following:

columnmove#xxx(mode[, count[, options_dictionary]])

The part filled by "xxx" is a character of its original command.

The first argument "mode" is always required, it is a character to represent a
kind of mapping modes. Since each commands can be mapped for |nmap|, |xmap|,
|omap|, and, |imap|, thus you can assgin 'n', 'x', 'o', and, 'i' to notice it
which mode you want to map.

The second argument "count" is a number. If a positive number is assigned,
functions would always ignore {count} and use the assigned number. If zero or
a negative number are assigned, functions refer {count} as usual.

The third argument "options_dict" is a dictionary which can force to use given
values of configuration variables. For example, assume you want to open folds
always, then use this argument like this:
>
	nmap <silent> <M-w> :<C-u>call columnmove#w('n', 0,
		\					{'fold_open' : -1})
<
If you want to use with |imap|, use like this:
>
	imap <silent> <M-w> <C-r>=columnmove#w('n', 0, {'fold_open' : -1})
<
If you want to use with |cmap|, you should not use <silent>. Otherwise
command-line would be not updated appropriately and you will see that it seems
like not moving cursor.
>
	cmap <M-w> <C-r>=columnmove#w('n', 0, {'fold_open' : -1})
<
The key names are the name of configuration variables removing first
"g:columnmove_". That is "open_fold", "strict_wbege" can be used.
Please refer |columnmove-configuration|.

Besides, a special key "raw" can be also used. If the value is 1 or 2, these
function returns a dictionary variable which has keys named "displacement",
"distination", "opened_fold". The key displacement has a number which
represents a distance from the current line to the destination line, this
number is correct only when folds has been opened in order written in
"opened_fold". "opened_fold" has a list which contains lists holding beginning
and ending line number of folds. When these commands work, those folds would
be opened, and closed if necessary. "distination" is a list including the line
number and column number of distination.
If the value is 1, these functions do not move cursor. But if the value is 2,
these functions do.

>
	let output = columnmove#w('n', 1, {'raw' : 1})

	" distance from current position to the destination
	" e.g. 10
	echo output.displacement

	" line number and column number of the destination
	" e.g. [11, 20]
	echo output.distination

	" opened folds
	" e.g. [[3, 5], [6, 9]]
	echo output.open_fold
<


						*columnmove#w()*
columnmove#w(mode[, target[, count[, options_dictionary]]])
	The function corresponds to |columnmove-w|.

						*columnmove#b()*
columnmove#b(mode[, target[, count[, options_dictionary]]])
	The function corresponds to |columnmove-b|.

						*columnmove#e()*
columnmove#e(mode[, target[, count[, options_dictionary]]])
	The function corresponds to |columnmove-e|.

						*columnmove#ge()*
columnmove#ge(mode[, target[, count[, options_dictionary]]])
	The function corresponds to |columnmove-ge|.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:
